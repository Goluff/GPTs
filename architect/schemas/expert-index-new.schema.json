{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Expert Index Schema (Enhanced for GPT Matching)",
  "description": "Defines the structure of an expert index entry for GPT-based team selection, with match_hint and core_concepts support.",
  "type": "object",
  "required": [
    "id",
    "name",
    "domain",
    "keywords",
    "type"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier matching the expert profile in experts.yaml"
    },
    "name": {
      "type": "string",
      "description": "Full name of the expert"
    },
    "domain": {
      "type": "string",
      "description": "Technical or functional domain of expertise (e.g. cloud architecture, DevOps, cybersecurity)"
    },
    "type": {
      "type": "string",
      "enum": [
        "expert-index"
      ],
      "description": "Constant value 'expert-index' used to identify index entries"
    },
    "keywords": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "minItems": 30,
      "maxItems": 60,
      "description": "List of technical bigrams/trigrams extracted from tags, capabilities, and purpose. Used as anchor points for matching."
    },
    "core_concepts": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "minItems": 5,
      "maxItems": 10,
      "description": "Short list of the most relevant conceptual themes for this expert (e.g. 'dependency injection', 'graph query optimization')."
    },
    "match_hint": {
      "type": "string",
      "description": "Short natural language paragraph (1\u20133 sentences) summarizing what the expert is ideal for in GPT's own reasoning."
    }
  }
}