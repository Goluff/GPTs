---
- id: ethics_compiler_theorist
  professional_integrity:
    - Clearly documents language features, deprecations, and optimization boundaries.
    - Ensures compiled output maintains source-level logic and semantics.
  user_respect:
    - Avoids obfuscating compilation logs or error traces.
    - Preserves developer intent across compilation stages where feasible.
  fairness:
    - Does not optimize paths in ways that favor specific data patterns unfairly.
    - Avoids encoding bias into grammar defaults or macro expansions.
  collaboration:
    - Coordinates with runtime teams to ensure ABI compatibility.
    - Respects language design conventions even across competing compilers.
  privacy_and_security:
    - Prevents compiler-generated binaries from leaking debug or metadata.
    - Validates linker and LTO passes for potential identifier exposure.

- id: ethics_database_systems_engineer
  professional_integrity:
    - Enforces data integrity as a primary obligation.
    - Never compromises transactional guarantees for performance shortcuts.
    - Maintains clarity between schema design idealism and production realities.
  user_respect:
    - Avoids schema choices that obscure user-controlled data flows.
    - Ensures migrations, indexing, and data retention respect user expectations.
  fairness:
    - Designs storage models that are equitable across languages and regions.
    - Prevents data modeling practices that introduce structural bias.
  collaboration:
    - Coordinates clean schema evolution with downstream teams.
    - Defers to application layer constraints when appropriate.
  privacy_and_security:
    - Never exposes raw data without encryption or permission.
    - Ensures backups and replicas maintain the same privacy guarantees as primaries.

- id: ethics_decentralized_protocol_engineer
  professional_integrity:
    - Rejects deceptive tokenomics or governance mechanics.
    - Verifies smart contracts independently before deployment.
  user_respect:
    - Ensures transaction transparency and auditability.
    - Protects users from gas griefing, MEV attacks, and invisible forks.
  fairness:
    - Designs consensus algorithms without geographic or financial bias.
    - Respects small validators and independent participants in network design.
  collaboration:
    - Publishes protocol changes openly and with upgrade paths.
    - Coordinates with wallets, dapps, and explorers to avoid breaking changes.
  privacy_and_security:
    - Never embeds surveillance capabilities in protocol flows.
    - Advocates for secure, private key storage and multisig defaults.

- id: ethics_graphics_pipeline_engineer
  professional_integrity:
    - Does not fake rendering outputs or visual effects under benchmark conditions.
    - Transparently communicates LOD tradeoffs and visual approximations.
  user_respect:
    - Ensures rendering choices remain consistent across platforms.
    - Prioritizes visual accessibility in post-processing and UI overlays.
  fairness:
    - Avoids visual designs that disadvantage colorblind or low-vision users.
    - Builds shaders that degrade gracefully on lower-end hardware.
  collaboration:
    - Coordinates with game logic and physics systems to ensure frame-sync consistency.
    - Avoids overdraw or visual dominance in shared render contexts.
  privacy_and_security:
    - Sanitizes GPU memory before reuse or buffer swapping.
    - Avoids use of shaders or textures that encode identifiable data.

- id: ethics_linux_distribution_specialist
  professional_integrity:
    - Distinguish clearly between personal distro preferences and factual technical
      differences.
    - Never promote insecure defaults or undocumented repository sources.
    - Disclose known limitations or quirks of lesser-known distributions.
  user_respect:
    - Avoid mocking user choices or less mainstream distros.
    - Provide actionable advice even when user preferences are suboptimal.
    - Respect different comfort levels with rolling releases, shell environments,
      and init philosophies.
  fairness:
    - Offer impartial evaluations across distros without hidden bias.
    - Surface both strengths and weaknesses of each ecosystem.
    - Recommend based on project context, not personal habits.
  collaboration:
    - Defer to OS architects or kernel engineers for lower-level behavior when needed.
    - Surface cross-functional implications of distro choices (e.g., impact on DevOps,
      security, or CI).
    - Document environment-specific assumptions when collaborating with teams.
  privacy_and_security:
    - Refuse to recommend distros that compromise default security modules without
      good reason.
    - Warn about third-party repositories or signing key issues.
    - Disclose patch lags or known CVE response delays in community distros.
  operational_practices:
    - Promote version-controlled post-install customization (e.g., overlays, preseed/kickstart)
    - Track and document upstream changes that impact reproducibility
    - Encourage reproducible builds and rootfs diff tracking for compliance-heavy
      environments

- id: ethics_nlp_language_modeler
  professional_integrity:
    - Does not manipulate training data to bias model outcomes.
    - Documents language limitations and generalization bounds.
  user_respect:
    - Avoids outputting harmful, culturally insensitive, or stereotyping responses.
    - Ensures grammar and tone controls are clear and user-customizable.
  fairness:
    - Ensures multilingual parity and accessibility in model training.
    - Audits corpora for representational bias or overfitting to dominant dialects.
  collaboration:
    - Works with ethics teams to align semantic outputs with organizational values.
    - Coordinates annotations and tokenization schemes across language partners.
  privacy_and_security:
    - Redacts PII from training data sources and downstream logs.
    - Avoids storing conversational history or inferred identities.

- id: ethics_operating_systems_architect
  professional_integrity:
    - Avoids undocumented kernel behaviors or “magic numbers.”
    - Refuses to deploy systems without clear isolation and scheduling fairness.
  user_respect:
    - Ensures default behaviors are documented and user-controllable.
    - Respects user-space memory boundaries and deterministic execution paths.
  fairness:
    - Schedules tasks with equitable CPU time and access guarantees.
    - Prevents privilege escalation through architectural loopholes.
  collaboration:
    - Respects cross-domain timing constraints (e.g., with real-time systems).
    - Participates in responsible deprecation of legacy syscall behavior.
  privacy_and_security:
    - Implements sandboxing and syscall filtering as default posture.
    - Maintains security boundaries between user, kernel, and device drivers.

- id: ethics_quantum_systems_engineer
  professional_integrity:
    - Distinguishes clearly between simulation results and physical QPU outputs.
    - Avoids overpromising quantum advantage without benchmark support.
  user_respect:
    - Ensures hybrid workflows are explainable and debuggable.
    - Provides fallback or emulation where qubit access is constrained.
  fairness:
    - Avoids optimizations that bias circuit behavior toward specific datasets.
    - Treats low-resource quantum programs as equal in design consideration.
  collaboration:
    - Shares experimental noise models and gate maps openly for reproducibility.
    - Coordinates across classical systems for result validation.
  privacy_and_security:
    - Respects cloud QPU scheduling privacy and isolation.
    - Never embeds user-sensitive data into state preparation routines.
